# cleanup_raptor.py - KARMA≈ûIK KODU TEMƒ∞ZLEME SCRIPT'ƒ∞
import os
import sys
import shutil
from pathlib import Path
import logging

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(message)s")

def cleanup_raptor_mess():
    """Karma≈üƒ±k RAPTOR kodlarƒ±nƒ± temizle"""
    
    print("üßπ RAPTOR CLEANUP BA≈ûLANIYOR")
    print("=" * 50)
    
    # 1. Gereksiz dosyalarƒ± sil
    files_to_remove = [
        "raptor/enhanced_retrieval_augmentation.py",
        "raptor/enhanced_retrieval_augmentation_optimized.py", 
        "raptor/hybrid_retriever_optimized.py",
        "raptor/query_enhancement_optimized.py",
        "raptor/cluster_tree_builder_optimized.py",
        "raptor/evaluation_framework.py",
        "raptor/sparse_retriever.py",
        "build-enhanced-raptor-full.py",
        "apply_major_optimizations.py", 
        "test_major_optimizations.py"
    ]
    
    print("üóëÔ∏è Gereksiz dosyalar siliniyor...")
    removed_count = 0
    for file_path in files_to_remove:
        if Path(file_path).exists():
            try:
                os.remove(file_path)
                print(f"   ‚úÖ Silindi: {file_path}")
                removed_count += 1
            except Exception as e:
                print(f"   ‚ùå Silinemedi {file_path}: {e}")
        else:
            print(f"   ‚ö™ Zaten yok: {file_path}")
    
    print(f"üìä {removed_count} dosya silindi")
    
    # 2. Gereksiz dizinleri sil
    dirs_to_remove = [
        "backup_before_optimization",
        "enhanced_cache", 
        "optimized_hybrid_cache",
        "enhanced_hybrid_cache",
        "enhanced_evaluation_results",
        "evaluation_results"
    ]
    
    print("\nüìÅ Gereksiz dizinler siliniyor...")
    for dir_path in dirs_to_remove:
        if Path(dir_path).exists():
            try:
                shutil.rmtree(dir_path)
                print(f"   ‚úÖ Silindi: {dir_path}/")
            except Exception as e:
                print(f"   ‚ùå Silinemedi {dir_path}: {e}")
    
    # 3. __init__.py'yi temizle
    print("\nüîß __init__.py temizleniyor...")
    
    clean_init_content = '''# raptor/__init__.py - TEMƒ∞Z VERSƒ∞YON

# Temel bile≈üenler
from .cluster_tree_builder import ClusterTreeBuilder, ClusterTreeConfig
from .EmbeddingModels import BaseEmbeddingModel, CustomEmbeddingModel
from .FaissRetriever import FaissRetriever, FaissRetrieverConfig  
from .QAModels import BaseQAModel, GPT41QAModel, GPT4OMINIQAModel, GPT4QAModel
from .RetrievalAugmentation import RetrievalAugmentation, RetrievalAugmentationConfig
from .Retrievers import BaseRetriever
from .SummarizationModels import (
    BaseSummarizationModel,
    GPT4OMiniSummarizationModel, 
    GPT4OSummarizationModel,
    GPT41MiniSummarizationModel,
    GPT41SummarizationModel,
)
from .tree_builder import TreeBuilder, TreeBuilderConfig
from .tree_retriever import TreeRetriever, TreeRetrieverConfig
from .tree_structures import Node, Tree

__all__ = [
    # Core classes
    'RetrievalAugmentation', 'RetrievalAugmentationConfig',
    'TreeBuilder', 'TreeBuilderConfig', 
    'TreeRetriever', 'TreeRetrieverConfig',
    'ClusterTreeBuilder', 'ClusterTreeConfig',
    'Node', 'Tree',
    
    # Models
    'BaseEmbeddingModel', 'CustomEmbeddingModel',
    'BaseQAModel', 'GPT41QAModel', 'GPT4OMINIQAModel', 'GPT4QAModel', 
    'BaseSummarizationModel', 'GPT4OMiniSummarizationModel',
    'GPT4OSummarizationModel', 'GPT41MiniSummarizationModel', 
    'GPT41SummarizationModel',
    
    # Retrievers
    'BaseRetriever', 'FaissRetriever', 'FaissRetrieverConfig'
]
'''
    
    try:
        with open("raptor/__init__.py", "w") as f:
            f.write(clean_init_content)
        print("   ‚úÖ __init__.py temizlendi")
    except Exception as e:
        print(f"   ‚ùå __init__.py temizlenemedi: {e}")
    
    # 4. Temel dosyalarƒ± geri y√ºkle (eƒüer backup varsa)
    print("\n‚Ü©Ô∏è Temel dosyalar kontrol ediliyor...")
    
    basic_files_to_restore = [
        "raptor/hybrid_retriever.py",
        "raptor/query_enhancement.py",
        "raptor/cluster_tree_builder.py"
    ]
    
    backup_dir = Path("backup_before_optimization")
    
    for file_path in basic_files_to_restore:
        if not Path(file_path).exists():
            backup_file = backup_dir / Path(file_path).name
            if backup_file.exists():
                try:
                    shutil.copy2(backup_file, file_path)
                    print(f"   ‚úÖ Geri y√ºklendi: {file_path}")
                except Exception as e:
                    print(f"   ‚ùå Geri y√ºklenemedi {file_path}: {e}")
            else:
                print(f"   ‚ö†Ô∏è Backup bulunamadƒ±: {file_path}")
        else:
            print(f"   ‚úÖ Zaten mevcut: {file_path}")
    
    # 5. Config dosyalarƒ±nƒ± temizle
    print("\nüîß Config dosyalarƒ± temizleniyor...")
    
    config_files = [
        "enhanced_hybrid_config.json",
        "*.optimization.json"
    ]
    
    for pattern in config_files:
        for file_path in Path(".").glob(pattern):
            try:
                file_path.unlink()
                print(f"   ‚úÖ Silindi: {file_path}")
            except Exception as e:
                print(f"   ‚ùå Silinemedi {file_path}: {e}")
    
    print("\n‚úÖ CLEANUP TAMAMLANDI!")
    print("=" * 50)
    print("üöÄ ≈ûimdi temiz RAPTOR sistemi kurulabilir.")

def install_clean_raptor():
    """Temiz RAPTOR sistemini kur"""
    
    print("\nüì¶ TEMƒ∞Z RAPTOR Sƒ∞STEMƒ∞ KURULUYOR")
    print("=" * 50)
    
    # Clean RAPTOR dosyasƒ±nƒ± kur
    clean_raptor_content = open("clean_raptor_system.py").read()
    
    try:
        with open("raptor/clean_raptor.py", "w") as f:
            f.write(clean_raptor_content)
        print("‚úÖ Clean RAPTOR sistemi kuruldu: raptor/clean_raptor.py")
    except Exception as e:
        print(f"‚ùå Clean RAPTOR kurulamadƒ±: {e}")
        return
    
    # Basit test dosyasƒ± olu≈ütur
    test_content = '''# test_clean_raptor.py - TEMƒ∞Z RAPTOR TEST SCRIPT'ƒ∞
import os
import time
from dotenv import load_dotenv

load_dotenv()

# Clean RAPTOR'u import et
try:
    from raptor.clean_raptor import CleanRAPTOR
    print("‚úÖ Clean RAPTOR import edildi")
except ImportError as e:
    print(f"‚ùå Import hatasƒ±: {e}")
    exit(1)

def test_clean_raptor():
    """Temiz RAPTOR testi"""
    
    print("üß™ TEMƒ∞Z RAPTOR TEST BA≈ûLIYOR")
    print("=" * 40)
    
    # Test metni
    test_text = """
    Yapay Zeka (AI), bilgisayar biliminin akƒ±llƒ± makineler yaratmayƒ± ama√ßlayan dalƒ±dƒ±r.
    Makine √ñƒürenmesi, verilerden √∂ƒürenebilen algoritmalara odaklanan AI'nƒ±n bir alt k√ºmesidir.
    Derin √ñƒürenme, √ßok katmanlƒ± sinir aƒülarƒ± kullanan makine √∂ƒürenmesinin bir alt k√ºmesidir.
    Doƒüal Dil ƒ∞≈üleme (NLP), insan diliyle ilgilenen AI'nƒ±n ba≈üka bir dalƒ±dƒ±r.
    Bilgisayarlƒ± G√∂r√º, makinelerin g√∂rsel bilgiyi yorumlamasƒ±nƒ± saƒülayan AI alanƒ±dƒ±r.
    
    Yapay zeka teknolojileri g√ºn√ºm√ºzde bir√ßok alanda kullanƒ±lmaktadƒ±r.
    Saƒülƒ±k sekt√∂r√ºnde te≈ühis ve tedavi √∂nerilerinde yardƒ±mcƒ± olmaktadƒ±r.
    Finans sekt√∂r√ºnde risk analizi ve fraud tespiti yapƒ±lmaktadƒ±r.
    Eƒüitim alanƒ±nda ki≈üiselle≈ütirilmi≈ü √∂ƒürenme deneyimleri sunulmaktadƒ±r.
    Ula≈üƒ±m sekt√∂r√ºnde otonom ara√ßlar geli≈ütirilmektedir.
    """
    
    try:
        # RAPTOR sistemini ba≈ülat
        print("üöÄ Clean RAPTOR sistemi ba≈ülatƒ±lƒ±yor...")
        raptor = CleanRAPTOR()
        
        # Tree olu≈ütur
        print("üå≥ Tree olu≈üturuluyor...")
        start_time = time.time()
        
        raptor.add_documents(test_text, max_tokens=100, max_layers=3)
        
        build_time = time.time() - start_time
        print(f"‚úÖ Tree {build_time:.2f} saniyede olu≈üturuldu")
        
        # ƒ∞statistikleri g√∂ster
        stats = raptor.get_stats()
        print(f"üìä Tree istatistikleri: {stats}")
        
        # Test sorularƒ±
        test_queries = [
            "Yapay zeka nedir?",
            "Makine √∂ƒürenmesi hakkƒ±nda bilgi ver",
            "AI hangi sekt√∂rlerde kullanƒ±lƒ±yor?",
            "What is deep learning?",
            "Tell me about NLP"
        ]
        
        print("\\nüîç RETRIEVAL TESTLER")
        print("-" * 30)
        
        for method in ["dense", "sparse", "hybrid"]:
            print(f"\\nüìã {method.upper()} Method:")
            
            total_time = 0
            success_count = 0
            
            for i, query in enumerate(test_queries, 1):
                try:
                    start_time = time.time()
                    context = raptor.retrieve(query, method=method, top_k=3)
                    query_time = time.time() - start_time
                    
                    total_time += query_time
                    success_count += 1
                    
                    print(f"   {i}. {query}")
                    print(f"      ‚è±Ô∏è {query_time:.3f}s - {len(context)} karakter")
                    
                except Exception as e:
                    print(f"   {i}. {query} - ‚ùå HATA: {e}")
            
            if success_count > 0:
                avg_time = total_time / success_count
                print(f"   üìà Ortalama: {avg_time:.3f}s ({success_count}/{len(test_queries)} ba≈üarƒ±lƒ±)")
        
        print("\\nü§ñ QA TESTLER")  
        print("-" * 30)
        
        qa_queries = [
            "Yapay zeka nedir?",
            "Hangi sekt√∂rlerde AI kullanƒ±lƒ±yor?",
            "What is machine learning?"
        ]
        
        for i, question in enumerate(qa_queries, 1):
            try:
                start_time = time.time()
                answer = raptor.answer_question(question)
                qa_time = time.time() - start_time
                
                print(f"\\n{i}. Soru: {question}")
                print(f"   Cevap: {answer[:200]}{'...' if len(answer) > 200 else ''}")
                print(f"   ‚è±Ô∏è {qa_time:.3f}s")
                
            except Exception as e:
                print(f"\\n{i}. Soru: {question} - ‚ùå HATA: {e}")
        
        # Tree'yi kaydet
        print("\\nüíæ Tree kaydediliyor...")
        raptor.save("clean_raptor_tree.pkl")
        print("‚úÖ Tree kaydedildi: clean_raptor_tree.pkl")
        
        # Tree'yi y√ºkle
        print("\\nüìÇ Tree y√ºkleniyor...")
        new_raptor = CleanRAPTOR()
        new_raptor.load("clean_raptor_tree.pkl")
        
        # Y√ºklenen tree ile test
        test_context = new_raptor.retrieve("yapay zeka", method="hybrid")
        print(f"‚úÖ Y√ºklenen tree test edildi: {len(test_context)} karakter")
        
        print("\\n" + "=" * 40)
        print("üéâ TEMƒ∞Z RAPTOR BA≈ûARIYLA TEST EDƒ∞LDƒ∞!")
        print("üöÄ Sistem kullanƒ±ma hazƒ±r!")
        
    except Exception as e:
        print(f"‚ùå Test hatasƒ±: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_clean_raptor()
'''
    
    try:
        with open("test_clean_raptor.py", "w") as f:
            f.write(test_content)
        print("‚úÖ Test dosyasƒ± olu≈üturuldu: test_clean_raptor.py")
    except Exception as e:
        print(f"‚ùå Test dosyasƒ± olu≈üturulamadƒ±: {e}")
    
    print("\nüéØ KURULUM TAMAMLANDI!")
    print("=" * 50)
    print("üìù Kullanƒ±m:")
    print("   1. python test_clean_raptor.py  # Test et")
    print("   2. from raptor.clean_raptor import CleanRAPTOR  # Kullan")

def create_simple_example():
    """Basit kullanƒ±m √∂rneƒüi olu≈ütur"""
    
    example_content = '''# simple_raptor_example.py - BASƒ∞T KULLANIM √ñRNEƒûƒ∞
from raptor.clean_raptor import CleanRAPTOR
import time

def simple_example():
    """En basit RAPTOR kullanƒ±mƒ±"""
    
    # RAPTOR olu≈ütur
    raptor = CleanRAPTOR()
    
    # Belge ekle
    document = """
    Python bir programlama dilidir. Basit ve okunabilir s√∂z dizimine sahiptir.
    Web geli≈ütirme, veri bilimi ve yapay zeka projelerinde sƒ±k√ßa kullanƒ±lƒ±r.
    Django ve Flask gibi pop√ºler web framework'leri vardƒ±r.
    NumPy, Pandas ve Scikit-learn gibi g√º√ßl√º k√ºt√ºphaneleri mevcuttur.
    """
    
    print("üî® Tree olu≈üturuluyor...")
    raptor.add_documents(document)
    
    print("üîç Soru soruluyor...")
    answer = raptor.answer_question("Python nedir?")
    
    print(f"üí¨ Cevap: {answer}")

if __name__ == "__main__":
    simple_example()
'''
    
    try:
        with open("simple_raptor_example.py", "w") as f:
            f.write(example_content)
        print("‚úÖ Basit √∂rnek olu≈üturuldu: simple_raptor_example.py")
    except Exception as e:
        print(f"‚ùå Basit √∂rnek olu≈üturulamadƒ±: {e}")

def main():
    """Ana fonksiyon"""
    try:
        # 1. Cleanup
        cleanup_raptor_mess()
        
        # 2. Clean sistem kur
        install_clean_raptor()
        
        # 3. Basit √∂rnek olu≈ütur  
        create_simple_example()
        
        print("\n" + "üéâ" * 20)
        print("TEMƒ∞Z RAPTOR Sƒ∞STEMƒ∞ HAZIR!")
        print("üéâ" * 20)
        
        print("\\nüìã SONRAKƒ∞ ADIMLAR:")
        print("   1. python test_clean_raptor.py")
        print("   2. python simple_raptor_example.py") 
        print("   3. Kendi projende kullan!")
        
    except Exception as e:
        print(f"‚ùå Ana hata: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()