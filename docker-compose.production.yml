# DOSYA: docker-compose.production.yml
# AÇIKLAMA: Production Docker deployment configuration

version: '3.8'

services:
  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: raptor-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - raptor-network

  # RAPTOR Application
  raptor-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: raptor-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - RAPTOR_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8000
      - MAX_WORKERS=4
      - RAPTOR_BATCH_SIZE=150
    volumes:
      - ./vectordb:/app/vectordb:ro
      - ./logs:/app/logs
      - ./config:/app/config:ro
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - raptor-network
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'
        reservations:
          memory: 4G
          cpus: '2'

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: raptor-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - raptor-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: raptor-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - raptor-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: raptor-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - raptor-app
    networks:
      - raptor-network

  # Log Aggregator (Optional)
  loki:
    image: grafana/loki:latest
    container_name: raptor-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - raptor-network

  # Log Shipper
  promtail:
    image: grafana/promtail:latest
    container_name: raptor-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/raptor:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - raptor-network

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  raptor-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

---

# DOSYA: Dockerfile
# AÇIKLAMA: Multi-stage Dockerfile for production deployment

FROM python:3.11-slim as base

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd --create-home --shell /bin/bash raptor

# Install Python dependencies
COPY requirements.txt .
COPY requirements-production.txt .

RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir -r requirements-production.txt

# Development stage
FROM base as development

# Install development dependencies
COPY requirements-dev.txt .
RUN pip install --no-cache-dir -r requirements-dev.txt

# Copy source code
COPY . .

# Change ownership
RUN chown -R raptor:raptor /app

USER raptor

CMD ["python", "generic-qa-server.py"]

# Production stage
FROM base as production

# Production optimizations
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1

# Copy only necessary files
COPY raptor/ ./raptor/
COPY generic-qa-server.py .
COPY production-config.py .
COPY monitoring-setup.py .
COPY .env .

# Create required directories
RUN mkdir -p logs metrics config vectordb && \
    chown -R raptor:raptor /app

# Health check script
COPY --chown=raptor:raptor scripts/healthcheck.py .

USER raptor

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python healthcheck.py

# Production server
CMD ["python", "-m", "uvicorn", "generic-qa-server:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "4", \
     "--log-level", "info", \
     "--access-log"]

---

# DOSYA: requirements-production.txt
# AÇIKLAMA: Additional production dependencies

uvicorn[standard]==0.27.0
gunicorn==21.2.0
psutil==5.9.7
prometheus_client==0.19.0
redis[hiredis]==5.0.1
websockets==12.0

---

# DOSYA: requirements-dev.txt  
# AÇIKLAMA: Development dependencies

pytest==7.4.3
pytest-asyncio==0.21.1
black==23.11.0
flake8==6.1.0
mypy==1.7.1
pytest-cov==4.1.0

---

# DOSYA: nginx/nginx.conf
# AÇIKLAMA: Nginx configuration for production

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Gzip
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=websocket:10m rate=5r/s;

    # Upstream backend
    upstream raptor_backend {
        least_conn;
        server raptor-app:8000 max_fails=3 fail_timeout=30s;
    }

    # WebSocket upstream
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Main server block
    server {
        listen 80;
        server_name _;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # API endpoints
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://raptor_backend;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }

        # WebSocket endpoints
        location /ws/ {
            limit_req zone=websocket burst=10 nodelay;
            proxy_pass http://raptor_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }

        # Health check
        location /health {
            proxy_pass http://raptor_backend;
            access_log off;
        }

        # Metrics (restrict access)
        location /metrics {
            allow 127.0.0.1;
            allow 172.20.0.0/16;  # Docker network
            deny all;
            proxy_pass http://raptor_backend;
        }

        # Default route
        location / {
            proxy_pass http://raptor_backend;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Monitoring endpoints
    server {
        listen 81;
        server_name _;

        # Prometheus
        location /prometheus/ {
            proxy_pass http://raptor-prometheus:9090/;
            proxy_set_header Host $http_host;
        }

        # Grafana
        location /grafana/ {
            proxy_pass http://raptor-grafana:3000/;
            proxy_set_header Host $http_host;
        }
    }
}

---

# DOSYA: scripts/healthcheck.py
# AÇIKLAMA: Health check script for Docker

#!/usr/bin/env python3

import sys
import requests
import json

def main():
    try:
        # Check main health endpoint
        response = requests.get('http://localhost:8000/health', timeout=5)
        
        if response.status_code != 200:
            print(f"Health check failed: HTTP {response.status_code}")
            sys.exit(1)
        
        health_data = response.json()
        
        # Check if all systems are healthy
        if health_data.get('status') == 'unhealthy':
            print(f"Health check failed: {health_data}")
            sys.exit(1)
        
        print("Health check passed")
        sys.exit(0)
        
    except Exception as e:
        print(f"Health check error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

---

# DOSYA: config/redis.conf
# AÇIKLAMA: Redis configuration for production

# Network
bind 127.0.0.1
port 6379
timeout 300
tcp-keepalive 60

# Memory
maxmemory 2gb
maxmemory-policy allkeys-lru

# Persistence
save 900 1
save 300 10
save 60 10000
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename raptor.rdb

# Logging
loglevel notice
logfile ""

# Performance
databases 1
hz 10

---

# DOSYA: scripts/deploy.sh
# AÇIKLAMA: Production deployment script

#!/bin/bash

set -e

echo "🚀 RAPTOR Production Deployment"
echo "================================"

# Configuration
ENVIRONMENT=${ENVIRONMENT:-production}
BUILD_TARGET=${BUILD_TARGET:-production}
COMPOSE_FILE="docker-compose.production.yml"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker is required but not installed"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose is required but not installed"
        exit 1
    fi
    
    if [ ! -f ".env" ]; then
        log_warn ".env file not found, creating from template..."
        cp .env.example .env
        log_warn "Please edit .env file with your configuration"
        exit 1
    fi
    
    if [ ! -d "vectordb" ]; then
        log_error "vectordb directory not found. Please build RAPTOR tree first."
        exit 1
    fi
    
    log_info "Prerequisites check passed"
}

# Build images
build_images() {
    log_info "Building Docker images..."
    
    docker-compose -f $COMPOSE_FILE build --build-arg TARGET=$BUILD_TARGET
    
    if [ $? -eq 0 ]; then
        log_info "Docker build completed successfully"
    else
        log_error "Docker build failed"
        exit 1
    fi
}

# Deploy services
deploy_services() {
    log_info "Deploying services..."
    
    # Create networks and volumes
    docker-compose -f $COMPOSE_FILE up -d --remove-orphans
    
    if [ $? -eq 0 ]; then
        log_info "Services deployed successfully"
    else
        log_error "Service deployment failed"
        exit 1
    fi
}

# Health check
health_check() {
    log_info "Performing health checks..."
    
    # Wait for services to start
    sleep 30
    
    # Check RAPTOR app
    if curl -f http://localhost:8000/health > /dev/null 2>&1; then
        log_info "RAPTOR app is healthy"
    else
        log_error "RAPTOR app health check failed"
        return 1
    fi
    
    # Check Redis
    if docker-compose -f $COMPOSE_FILE exec redis redis-cli ping > /dev/null 2>&1; then
        log_info "Redis is healthy"
    else
        log_error "Redis health check failed"
        return 1
    fi
    
    # Check Prometheus
    if curl -f http://localhost:9090/-/healthy > /dev/null 2>&1; then
        log_info "Prometheus is healthy"
    else
        log_warn "Prometheus health check failed"
    fi
    
    log_info "Health checks completed"
    return 0
}

# Show deployment info
show_info() {
    echo ""
    echo "🎉 Deployment completed successfully!"
    echo "=================================="
    echo "🌐 RAPTOR API: http://localhost:8000"
    echo "🔍 Health Check: http://localhost:8000/health"
    echo "📊 Prometheus: http://localhost:9090"
    echo "📈 Grafana: http://localhost:3000 (admin/admin)"
    echo "📋 Nginx Status: http://localhost:81"
    echo ""
    echo "📝 Useful commands:"
    echo "   View logs: docker-compose -f $COMPOSE_FILE logs -f"
    echo "   Stop services: docker-compose -f $COMPOSE_FILE down"
    echo "   Restart: docker-compose -f $COMPOSE_FILE restart"
    echo ""
}

# Rollback function
rollback() {
    log_warn "Rolling back deployment..."
    docker-compose -f $COMPOSE_FILE down
    log_info "Rollback completed"
}

# Main deployment
main() {
    check_prerequisites
    build_images
    deploy_services
    
    if health_check; then
        show_info
    else
        log_error "Health checks failed, rolling back..."
        rollback
        exit 1
    fi
}

# Handle signals
trap rollback SIGINT SIGTERM

# Run main function
main

echo "✅ RAPTOR Production deployment completed!"

---

# DOSYA: .env.example
# AÇIKLAMA: Environment variables template

# OpenAI Configuration
OPENAI_API_KEY=your_openai_api_key_here

# Redis Configuration  
REDIS_PASSWORD=your_redis_password_here

# Grafana Configuration
GRAFANA_PASSWORD=admin

# Application Configuration
RAPTOR_ENV=production
SERVER_HOST=0.0.0.0
SERVER_PORT=8000
MAX_WORKERS=4

# Performance Tuning
RAPTOR_BATCH_SIZE=150
MAX_CONCURRENT_OPERATIONS=12

# Paths
DATA_PATH=data
VECTORDB_PATH=vectordb
LOGS_PATH=logs