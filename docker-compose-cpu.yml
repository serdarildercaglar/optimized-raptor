services:
  redis:
    image: redis:7-alpine
    container_name: raptor-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - raptor-network

  raptor-app:
    build:
      context: .
      dockerfile: Dockerfile.cpu
      args:
        - CPU_ONLY=true
    container_name: raptor-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    # CPU-only resource limits
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'
        reservations:
          memory: 4G
          cpus: '2'
    environment:
      - RAPTOR_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8000
      # CPU-only mode
      - FORCE_CPU_MODE=true
      - CUDA_VISIBLE_DEVICES=""
      - NVIDIA_VISIBLE_DEVICES=""
      # HuggingFace cache ayarları
      - HF_HOME=/app/.cache/huggingface
      - TRANSFORMERS_CACHE=/app/.cache/huggingface/hub
      - HF_DATASETS_CACHE=/app/.cache/huggingface/datasets
      - HF_HUB_DISABLE_SYMLINKS_WARNING=1
      # CPU optimizations
      - TOKENIZERS_PARALLELISM=false
      - OMP_NUM_THREADS=4
      - MKL_NUM_THREADS=4
      - OPENBLAS_NUM_THREADS=4
    volumes:
      - ./vectordb:/app/vectordb:ro
      - ./logs:/app/logs
      - ./config:/app/config:ro
      # HuggingFace cache mount
      - ${HOME}/.cache/huggingface:/app/.cache/huggingface
      # Local cache directories
      - ./embedding_cache:/app/embedding_cache
      - ./query_cache:/app/query_cache
      # Model cache için persistent volume
      - model_cache:/app/.local_model_cache
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: |
        python -c "
        import requests, time, os
        
        try:
            response = requests.get('http://localhost:8000/health', timeout=30)
            if response.status_code != 200:
                exit(1)
            
            health_data = response.json()
            if health_data.get('models', {}).get('models_loaded', False):
                print('✅ Models loaded successfully (CPU mode)')
                exit(0)
            else:
                print('⏳ Models still loading... (CPU mode - slower)')
                exit(1)
                
        except Exception as e:
            print(f'❌ Health check failed: {e}')
            exit(1)
        "
      interval: 90s      # CPU'da daha uzun interval
      timeout: 45s       # CPU'da daha uzun timeout
      retries: 15        # CPU'da daha fazla retry
      start_period: 900s # CPU'da 15 dakika başlangıç
    networks:
      - raptor-network
    # CPU için optimize edilmiş shared memory
    shm_size: 2gb
    ulimits:
      memlock: -1
      stack: 67108864
    init: true

  prometheus:
    image: prom/prometheus:latest
    container_name: raptor-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - raptor-network

  grafana:
    image: grafana/grafana:latest
    container_name: raptor-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - raptor-network

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  model_cache:

networks:
  raptor-network:
    driver: bridge